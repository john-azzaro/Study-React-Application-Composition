Process Notes for React File Uploader
======================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.




Objective of Study
==================
The objective of this app is to make a "file upload" application with particular focus on the decomposition of the design into React components 
in a heirarchy and implement it with state and props.

Problem solving is also extremely important to focus on. For example, when you want to get to New York city, you think about the solution in 
terms of resources available to you. If you have a plane, you plan the route and where you can refuel until you get to your destination. But If
you have a sail boat, you need to think about how to plot your voyage (around south america or through the panama canal). In other words, when you 
build an app, you need to think about the choice of tools and how those tools imp0act your solution to the problem. If you use React, app is 
thought about in a certain way.

Figuring out what makes a component and when to continue decomposing components is very importan to focus on here.



# How do you organize a React application?
==========================================
React is broken up into small, reusable components. 
These components can be used to assemble the application interface. 
Each component represents a small area of the screen and may have smaller components within those.

You need to make sure you know what you want to build and have some idea of how to build it.
You need to decide what components you want need to build, how they will work together, etc.

To start, you usually start with a mockup of the design and then break that mockup down into components by functional areas.
Your objective is to make the component as single-minded as possible... make that component responsible for one thing.
If the component is getting too complex, you need to break it down even more.

      _____________________________________________________________
      File uploader                            Search_________ 
                                        oAll oUploaded oSynced oNew
        ----------------------------------------------------
      [@]    My December Expenses.txt                        0.9kb
              uploaded                     reloaded  trash  cloud
        ----------------------------------------------------
      [@]    me on skis.jpg                                  4.3kb
              uploaded                     reloaded  trash  cloud
        ----------------------------------------------------  
      [@]   cats falling.mov                                 3.4mb
              uploaded                     reloaded  trash  cloud
        ----------------------------------------------------
      _____________________________________________________________


Then, you need to think about which data are state and which are props and where the state should live in your components heirarchy.
Once this is done, you add the interactivity of the user.




# The file uploader.
=====================
For this study, we'll make a file uploader that will help sync (fake) files with something like dropbox. Note that this is entirely front end.

What kind of data is our file uploader going to be working with? 
      ----------------------------------------------------------------------------------------------
      [
        {"fileType":"jpg","size":"4.3MB","name":"me on skis.jpg","status":"Synced"},
        {"fileType":"mov","size":"1.3GB","name":"cats falling.mov","status":"Uploaded"},
        {"fileType":"txt","size":"0.9KB","name":"My December expenses.txt","status":"Uploaded"},
        {"fileType":"mp3","size":"3.4MB","name":"disturbed_sound_of_silence.mp3","status":"New"},
      ]
      -----------------------------------------------------------------------------------------------


