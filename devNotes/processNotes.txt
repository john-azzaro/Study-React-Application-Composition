Process Notes for React File Uploader
======================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.




Objective of Study
==================
The objective of this app is to make a "file upload" application with particular focus on the decomposition of the design into React components 
in a heirarchy and implement it with state and props.

Problem solving is also extremely important to focus on. For example, when you want to get to New York city, you think about the solution in 
terms of resources available to you. If you have a plane, you plan the route and where you can refuel until you get to your destination. But If
you have a sail boat, you need to think about how to plot your voyage (around south america or through the panama canal). In other words, when you 
build an app, you need to think about the choice of tools and how those tools imp0act your solution to the problem. If you use React, app is 
thought about in a certain way.

Figuring out what makes a component and when to continue decomposing components is very importan to focus on here.





# How do you organize a React application?
==========================================
React is broken up into small, reusable components. 
These components can be used to assemble the application interface. 
Each component represents a small area of the screen and may have smaller components within those.

You need to make sure you know what you want to build and have some idea of how to build it.
You need to decide what components you want need to build, how they will work together, etc.

To start, you usually start with a mockup of the design and then break that mockup down into components by functional areas.
Your objective is to make the component as single-minded as possible... make that component responsible for one thing.
If the component is getting too complex, you need to break it down even more.

      _____________________________________________________________
      File uploader                            Search_________ 
                                        oAll oUploaded oSynced oNew
        ----------------------------------------------------
      [@]    My December Expenses.txt                        0.9kb
              uploaded                     reloaded  trash  cloud
        ----------------------------------------------------
      [@]    me on skis.jpg                                  4.3kb
              uploaded                     reloaded  trash  cloud
        ----------------------------------------------------  
      [@]   cats falling.mov                                 3.4mb
              uploaded                     reloaded  trash  cloud
        ----------------------------------------------------
      _____________________________________________________________


Then, you need to think about which data are state and which are props and where the state should live in your components heirarchy.
Once this is done, you add the interactivity of the user.






# The file uploader.
=====================
For this study, we'll make a file uploader that will help sync (fake) files with something like dropbox. Note that this is entirely front end.

What kind of data is our file uploader going to be working with? 
      ----------------------------------------------------------------------------------------------
      [
        {"fileType":"jpg","size":"4.3MB","name":"me on skis.jpg","status":"Synced"},
        {"fileType":"mov","size":"1.3GB","name":"cats falling.mov","status":"Uploaded"},
        {"fileType":"txt","size":"0.9KB","name":"My December expenses.txt","status":"Uploaded"},
        {"fileType":"mp3","size":"3.4MB","name":"disturbed_sound_of_silence.mp3","status":"New"},
      ]
      -----------------------------------------------------------------------------------------------


Now back to the mockup...
Take a look at your mockup and thnk about how you can break it up into FUNCTIONAL AREAS.
A function area is some part of the screen that is responsible for something specific. 

      _____________________________________________________________         __
      File uploader                            Search_________                |--Header area component function area.
                                        oAll oUploaded oSynced oNew         __|
        ----------------------------------------------------                  |
      [@]    My December Expenses.txt                        0.9kb            |--List of files component function area.
              uploaded                     reloaded  trash  cloud             |__
        ----------------------------------------------------                  |  |
      [@]    me on skis.jpg                                  4.3kb            |  |--Individual file component function area.
              uploaded                     reloaded  trash  cloud             |__|
        ----------------------------------------------------                  |
      [@]   cats falling.mov                                 3.4mb            |
              uploaded                     reloaded  trash  cloud             |
        ----------------------------------------------------                __|
      _____________________________________________________________


In the mockup above, the design is split up into 3 components:
  1. Header component.
  2. List component.
  3. File component.

The most effective designs are made up of components that each only have a single responsibility. This is good
because it makes it easier to test your components and debug them. It also makes them practical for reusability.







How do you think about decomposing a mockup for react components?
=================================================================

1. Start with the Root component.
  The root component is the central component that all the other components will be nested inside. In the case of this 
  application, the root component is going to the header component and list component nested inside it. From there
  you can take each component and then break that down to even smaller components.


2. Also consider data when breaking down the components.
  Each componnt will either display or have some interaction with a part of that data. In the case of this application, the data is
  going to be an array of objects. You need to think about a few things here.
    A. Which component in the interface relates to the array of objects?
    B. Which component relates to a single object?
    C. Which Do we need components for any part of the object?


3. Try to further decompose the components that you already identified and give them a functional name:
  1. Entire application (i.e. app component)     -- FileUploader
    I. Header component.                         ---  SeachBar
      1. Input bar.                              ----   SearchBox
      2. Filter options.                         ----   FilterOptions
    II. List component.                          ---  FilterableList
    III. File component.                         ---  ListItem
      1. List item control bar.                  ----   ControlBar


4. Think about the heirarchical structure of the arranged components.
  This is going to give you a better idea of what 

                                    FileUploader
                                          |
                      ____________________|___________________   
                      |                                       |
                    SearchBar                             FilterableList
                      |                                       |
            __________|__________                     ________|____________________________________  
            |                    |                    |                     |                      |
        SearchInput         FilerOptions          ListItem               ListItem              ListItem
                                                      |
                                                  ControlBar





How do you build the app from decomposition?
============================================
1. Build out the application's USER INTERFACE with no interaction
  Building the application out without any interaction is like building a live wireframe of your application. 
  However, it depends on what sort of application you are building. 
  
  A. For complex apps, build from the bottom up.
      For example, if you are building an app that is highly complex, you would want to build out smaller
      components first that are lower in the tree and then use those to build the components higher up until you 
      have a fully working app.

  B. For simpler apps, build from the top down.
      When you build smaller apps, it is possible to build from the root component down until all your components
      are built.

 C. Each component should have a render method that displays the data in your model.
      That data should only be props for now since you are not doing the interactivity and state is about interactivity
      and how data changes over time. You can declare the data needed in the root of the application and pass props to 
      the nested components.





Building the file uploader application
=======================================



Build the foundation: Initial structure of App and index
=========================================================
1. Add static data for the app.
  For this application, we are going to use static data that will be supplied to the app via a constant called "FILES".
  In order for the application to use this data, you need to pass it to the App component as a prop.
  
  ---------------------------------------------------------------------------------------------------------------
    import React from 'react';
    import ReactDOM from 'react-dom';
    import './index.css';
    import App from './App';

    const FILES = [                                                                                                 // 1. "FILES" constant will function as the data for the application.
      {"fileType":"jpg","size":"4.3MB","name":"me on skis.jpg","status":"Synced"},
      {"fileType":"mov","size":"1.3GB","name":"cats falling.mov","status":"Uploaded"},
      {"fileType":"txt","size":"0.9KB","name":"My December expenses.txt","status":"Uploaded"},
      {"fileType":"mp3","size":"3.4MB","name":"disturbed_sound_of_silence.mp3","status":"New"},
    ];

    ReactDOM.render(<App files={FILES}/>, document.getElementById('root'));                                         // 2. pass in the "FILES" constant as a prop (e.g. files={FILES}).
  ---------------------------------------------------------------------------------------------------------------


2. Modify the App component to be composed of TWO components
  In the planning and wireframing phase, we decided that the "SearchBar" and "FilterableList" would be two central 
  components of the application. But first things first, set up your class component.
  ----------------------------------------------------------------------------------------------------------------
    import React, { Component } from 'react';                                                                       // 1. Import react

    class App extends Component  {                                                                                  // 2. Class component named App.
      render() {
        return (

        )
      }
    }

    export default App;                                                                                             // 3. Export component.
  ----------------------------------------------------------------------------------------------------------------

  Then, add the components in the composition that was planned. In this case, we have a main div (which remember needs
  to be like this because the component will work only on one primary component) and then within it, the two components.
  One of the components, FilerableList, is going to have the 
  ----------------------------------------------------------------------------------------------------------------
    import React, { Component } from 'react';                                                                     

    class App extends Component  {                                                                                
      render() {
        return (
          <div className="App">                                                                                     // 1. App component with...
            <SearchBar />                                                                                           // 2. SearchBar component...
            <FilterableList files={this.props.files} />                                                             // 3. FilterableList component WITH the files props passed in. 
          </div>
        )
      }
    }

    export default App;                                                                                           
  ----------------------------------------------------------------------------------------------------------------




Build out your components
=========================
For the components, you simply need to create a component folder in the src folder, add the associated files, and 
build out the component. Below is an outline of the SearchBar component, but the same process can be used for 
practically every other component.

1. First, create a component folder inside "src".
  ----------------------------------------------------------------------------------------------------------------
    src  >  SearchBar
  ----------------------------------------------------------------------------------------------------------------

2. Second, create your files associated with the component.
 * Normally, you'll want 3 files: .js, .css, and .test.js. 
  ----------------------------------------------------------------------------------------------------------------
    SearchBar  >  SearchBar.js  
               >  SearchBar.css
               >  SearchBar.test.js
  ----------------------------------------------------------------------------------------------------------------

2. First, build the SearchBar component.
------------------------------------------------------------------------------------------------------------------
    import React, { Component } from 'react';                                                                       // Import React
    import './SearchBar.css';                                                                                       // Import SearBar css file.
    import SearchBox from '../SearchBox/SearchBox';                                                                 // Import SearchBox (another component that will be added next).
    import FilterOptions from '../FilterOptions/FilterOptions';                                                     // Import FilterOptions (another component that will be added later).

    class SearchBar extends Component {
      render() {
        return (
          <div className="SearchBar">                                                                                // SearchBar component with...
            <div className="SearchBar__heading">                                                                     // ... Heading 
              <h1>File Uploader</h1> 
            </div>
            <div className="SearchBar__controls">                                                                    // ... and Searchbar controls including...
              <SearchBox/>                                                                                           // ... SearchBox component...
              <FilterOptions/>                                                                                       // ... and FilterOptions component.
            </div>
          </div>
        );
      }
    }

    export default SearchBar;                                                                                        // Export SearchBar for use in the app.
------------------------------------------------------------------------------------------------------------------



SIDENOTE: Importing Third-party icons for in-app use.
======================================================
  If you find you want to use third-party icons for your application, you simply need to install the third-party
  library via npm, import it, and use the corresponding component.

  For this project, you'll want to install fontawesome libraries:
  ---------------------------------------------------------------------------
    $ npm install @fortawesome/fontawesome-svg-core
    $ npm install @fortawesome/free-solid-svg-icons
    $ npm install @fortawesome/react-fontawesome
  ---------------------------------------------------------------------------

  And then import the library to your file:
  ----------------------------------------------------------------------------
    import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
    import { faSearch } from '@fortawesome/free-solid-svg-icons';
  ----------------------------------------------------------------------------

  And lastly, you can use the icon in your component:
  ---------------------------------------------------------------------------
    <FontAwesomeIcon icon={faSearch}/>
  ---------------------------------------------------------------------------





Build the subcomponents for your components
============================================
  * For components that are going to be used inside parent components, its the same process. Simply create
    the folder in src, create the files, and code the component.
  
  1. Create FilterOptions component:
  2. Create FilterableList component.
  3. Create ListItem component.
  4. Create ControlBar component.






Identify the state needed for the application
==============================================
  Now you need to think about state and where it should reside in your application. This means you need to 
  think about where all the data that is needed for your app is going to reside. Also, think about the names
  you want to attribute to them.

  For example, we know that:
    1. the user is going to enter a search term.        -- searchTerm
    2. the filter option selected by the user.          -- FilterOption
    3. Where the array of files reside.                 -- files
    4. filtered list of files to be displayed.          -- filteredFiles

  It's important to remember that:
    * State is not passed from the parent.
    * State changes... if it does not, then is is not a state, it is a prop.
    * If it is computed from other data, then it is NOT state.


  For "files":
    This is the original array of files passed down from the top component (app) displays updates as this value changes, so it does not have state.
  
  For "filteredFiles":
    This is calculated from the original arrays as "filterOptions" and "searchTerm" so it is NOT state either.

  For "searchTerm":
    searchTerm changes as the user interacts with the app and the app displays updated as this value changesm so it has state.

  For "filterOption":
    This changes and causes the app to change, so it has state.





Decide on where state should live.
==================================
  To decide on where state should live, you need to identify which component MUTATES or chnages that particular peice of state 
  and which components are updated when the state changes. For example:

  1. "searchTerm" is mutated by the "searchBox" component.
  2. "FilerableList" changes what it displays when that state changes.

  ## FIND THE COMMON PARENT 
  To find the commmon parent that owns both of these components state, you need to trace back to a shared common parent. In the case
  of this fileUploader application, its owned by "App". Therefore, all updates to the state of "searchTerm" and "FilterableList" will
  happen in the "App" component.

  This underlines how React emphasizes one-way data-flow via props down the heirarchy. So any component below a point (i.e. App to searchBox)
  has access to the value in App via props. Any component that lives ABOVE the component where that state lives does NOT have access to it.






  Add state to your components
  ============================
    Since "App" has been identified as the location where we now we want state to live, the application can now be coded up with state.
    To add state, create a constructor and write an instance property named state. Inside this instance of state, you will put the initial
    state values for your app, which in this case is the search term (i.e. what is displayed in the search box on start) and the filter
    option (i.e. which files will be displayed initially)
    -------------------------------------------------------------------
      class App extends Component {
        constructor(props) {                                              // constructor added that takes props as a parameter...
          super(props);                                                   //... and add super(props) to reach outside this component to React.Component.
          this.state = {                                                  //... and then create an instance propety called "state" which will hold the initial state of the component.
            searchTerm: '',                                                     // By default, searchTerm set to empty string since no term will be entered in the input box.
            filterOption: 'All'                                                 // By default, filterOption set to All since all files will be displayed.
          }
        }
        render() {
          return (
            <div className="App">
              <SearchBar/>
              <FilterableList files={this.props.files} />
            </div>
          );
        }
      }
    -------------------------------------------------------------------





  Pass the state values to the child components.
  ==============================================
    Now take a look at the initial states that you have established and pass those values to the components that they pertain to
    in the rendered JSX below. In this case, we have the searchTerm (which is in the "SearchBar" component) and the filterOption 
    (which is in the "FilterableLIst" component). By doing this, you allow the child components to access state from this point on.
    -------------------------------------------------------------------
      class App extends Component {
        constructor(props) {    
          super(props);         
          this.state = {          
            searchTerm: '',     
            filterOption: 'All'         
          }
        }
        render() {
          return (
            <div className="App">
              <SearchBar                                                  // To pass the state of searchTerm and filterOption to child components...
                searchTerm={this.state.searchTerm}                        // ... pass searchTerm as a prop.
                filterOption={this.state.filterOption}                    // ... pass filterOption as a prop.
              />
              <FilterableList                                             // To pass the state of searchTerm and filterOption to child components...
                files={this.props.files}        
                searchTerm={this.state.searchTerm}                        // ... pass searchTerm as a prop.
                filterOption={this.state.filterOption}                    // ... pass filterOption as a prop.
              />
            </div>
          );
        }
      }
    -------------------------------------------------------------------





  Implement state in the child components:
  ========================================
    Now that you can access the state that lives in the App component, you can use the values that you just passed in to use 
    in the child components.

    In the FilterableList component below, the two values are used to filter the array of files displayed. This is done accessing
    the values from the props (i.e. creating const's for each via destructuring) and keep those maching that critria. The criteria
    in this case is the file name containing the searchTerm and the file status being equal to the filterOption (or the 'All' option).

    --FILTERABLELIST------------------------------------------------------------------------

      import React, { Component } from 'react';
      import './FilterableList.css';
      import ListItem from '../ListItem/ListItem';

      class FilterableList extends Component {
        render() {
          const { searchTerm, filterOption } = this.props;
          const list = this.props.files
              .filter(file => file.name.includes(searchTerm)
                    && (filterOption === 'All' || file.status === filterOption))
              .map((file, key) => <ListItem {...file} key={key} />);
          return (
            <div className="FilterableList">
              {list}
            </div>
          );
        }
      }

      FilterableList.defaultProps = {
        files: []
      };


      export default FilterableList;

    --------------------------------------------------------------------------

    --SEARCHBOX------------------------------------------------------------------------
      
      import React, { Component } from 'react';
      import './SearchBox.css';
      import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
      import { faSearch } from '@fortawesome/free-solid-svg-icons';

      class SearchBox extends Component {
        render() {
          return (
            <div className="SearchBox">
              <FontAwesomeIcon icon={faSearch}/>
              <input placeholder="Search term" value={this.props.searchTerm}/>      // added searchTerm as value
            </div>   
          );
        }
      }

      export default SearchBox;

    --------------------------------------------------------------------------

    --FILTEROPTIONS-------------------------------------------------------------------------------------------------------------------------------
      
      import React, { Component } from 'react';
      import './FilterOptions.css';

      class FilterOptions extends Component {
        render() {
          const { filterOption } = this.props;                                                                                           // access props.filterOption
          return (
            <div className="FilterOptions">
              <div className="FilterOptions__option">
                <label htmlFor="filter_all">
                  <input type="radio" value="All" id="filter_all" name="filter" checked={filterOption ==="All"}/>                       // and set the checked prop to X.
                All
                </label>
              </div>
              <div className="FilterOptions__option">
                <label htmlFor="filter_uploaded">
                  <input type="radio" value="Uploaded" id="filter_uploaded" name="filter" checked={filterOption ==="Uploaded"}/>
                Uploaded
                </label>
              </div>
              <div className="FilterOptions__option">  
                <label htmlFor="filter_synced">
                  <input type="radio" value="Synced" id="filter_synced" name="filter" checked={filterOption ==="Synced"}/>
                Synced
                </label>
              </div>
              <div className="FilterOptions__option">  
                <label htmlFor="filter_new">
                  <input type="radio" value="New" id="filter_new" name="filter" checked={filterOption ==="New"}/>
                New
                </label>
              </div>
            </div>
          );
        }
      }

      export default FilterOptions;

    ----------------------------------------------------------------------------------------------------------------------------





Adding Interactivity to the application
========================================
  Adding interactivity essentially means we are wiring all the buttons up via event listens, form submissions, etc.
  Remember that you need to pass a function to a component if you want that component to invoke some action in the parent component. 
  
  In this case, we have the state of the parent (i.e. App), but we want searchbox to update that state. to do so, we can pass a callback
  function as a prop from the App component to the SearchBoc component. Since state is owned by App, we'll add some methods to update the state.


  ADD A CALLBACK METHOD 
  ======================
  First, lets add a method that will update the search term (which in its initial state is set to an empty string).
  Second, pass this function as a callback prop to the SearchBar component.
  --------------------------------------------------------------------------------
    class App extends Component {
      constructor(props) {
        super(props);
        this.state = {
          searchTerm: '',
          filterOption: 'All'
        };
      }

      updateSearchTerm(term) {                                                         // "updateSearchTerm" callback function that will set the state to the term input.
        this.setState({
          searchTerm: term
        })
      }

      render() {
        return (
          <div className="App">
            <SearchBar
              searchTerm={this.state.searchTerm}
              filterOption={this.state.filterOption}
              handleUpdate={(term) => this.updateSearchTerm(term)}/>                  // "updateSearchTerm" passed as a callback prop to searchbar.
            <FilterableList
              files={this.props.files}  
              searchTerm={this.state.searchTerm}
              filterOption={this.state.filterOption}/>
          </div>
        );
      }
    }
  --------------------------------------------------------------------------------


  IN THE FIRST CHILD COMPONENT, PASS ALONG THE PROP 
  ==================================================
  In the SearchBar component where we passed the callback function as a prop, we are not directly using it in the componet.
  However, you still want to pass it along for later use.
  --------------------------------------------------------------------------------
    class SearchBar extends Component {
      render() {
        return (
          <div className="SearchBar">
            <div className="SearchBar__heading">
              <h1>File Uploader</h1>
            </div>
            <div className="SearchBar__controls">
              <SearchBox                                                           // In SearchBox...
              searchTerm={this.props.searchTerm}                                   // ... pass "searchTerm"...
              handleUpdate={this.props.handleUpdate}/>                             // ... and "handleUpdate"
              <FilterOptions/>
            </div>
          </div>
        );
      }
    }
  --------------------------------------------------------------------------------


  AND IN THE RELEVANT COMPONENT, ADD AN onChange EVENT.
  =====================================================
  Adding an onChange event handler to the invoke and invoking this callback function whenever the content of the input changes will add
  the desired level of interactivity. 
  
  This requires you to add an "onChange" event, where the event handler invokes the callback function with the value entered in the 
  input box. This sets the searchTerm state in the App component. An update to the state triggers a re-render and the new searchTerm prop 
  value is passed to "FilterableList" which displays files that match "searchTerm".
  ----------------------------------------------------------------------------------
    class SearchBox extends Component {
      render() {
        return (
          <div className="SearchBox">
            <FontAwesomeIcon icon={faSearch}/>
            <input placeholder="Search term" value={this.props.searchTerm}/>
            <input                                                                    // For the input interactivity...
              placeholder="Search term"     
              value={this.props.searchTerm}
              onChange={e => this.props.handleUpdate(e.target.value)}/>               // "onChange", the event will invoke the props.handleUpdate with the target value of the input box.
          </div>   
        );
      }
    }
  ----------------------------------------------------------------------------------


  