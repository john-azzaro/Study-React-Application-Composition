Process Notes for React File Uploader
======================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.




Objective of Study
==================
The objective of this app is to make a "file upload" application with particular focus on the decomposition of the design into React components 
in a heirarchy and implement it with state and props.

Problem solving is also extremely important to focus on. For example, when you want to get to New York city, you think about the solution in 
terms of resources available to you. If you have a plane, you plan the route and where you can refuel until you get to your destination. But If
you have a sail boat, you need to think about how to plot your voyage (around south america or through the panama canal). In other words, when you 
build an app, you need to think about the choice of tools and how those tools imp0act your solution to the problem. If you use React, app is 
thought about in a certain way.

Figuring out what makes a component and when to continue decomposing components is very importan to focus on here.





# How do you organize a React application?
==========================================
React is broken up into small, reusable components. 
These components can be used to assemble the application interface. 
Each component represents a small area of the screen and may have smaller components within those.

You need to make sure you know what you want to build and have some idea of how to build it.
You need to decide what components you want need to build, how they will work together, etc.

To start, you usually start with a mockup of the design and then break that mockup down into components by functional areas.
Your objective is to make the component as single-minded as possible... make that component responsible for one thing.
If the component is getting too complex, you need to break it down even more.

      _____________________________________________________________
      File uploader                            Search_________ 
                                        oAll oUploaded oSynced oNew
        ----------------------------------------------------
      [@]    My December Expenses.txt                        0.9kb
              uploaded                     reloaded  trash  cloud
        ----------------------------------------------------
      [@]    me on skis.jpg                                  4.3kb
              uploaded                     reloaded  trash  cloud
        ----------------------------------------------------  
      [@]   cats falling.mov                                 3.4mb
              uploaded                     reloaded  trash  cloud
        ----------------------------------------------------
      _____________________________________________________________


Then, you need to think about which data are state and which are props and where the state should live in your components heirarchy.
Once this is done, you add the interactivity of the user.






# The file uploader.
=====================
For this study, we'll make a file uploader that will help sync (fake) files with something like dropbox. Note that this is entirely front end.

What kind of data is our file uploader going to be working with? 
      ----------------------------------------------------------------------------------------------
      [
        {"fileType":"jpg","size":"4.3MB","name":"me on skis.jpg","status":"Synced"},
        {"fileType":"mov","size":"1.3GB","name":"cats falling.mov","status":"Uploaded"},
        {"fileType":"txt","size":"0.9KB","name":"My December expenses.txt","status":"Uploaded"},
        {"fileType":"mp3","size":"3.4MB","name":"disturbed_sound_of_silence.mp3","status":"New"},
      ]
      -----------------------------------------------------------------------------------------------


Now back to the mockup...
Take a look at your mockup and thnk about how you can break it up into FUNCTIONAL AREAS.
A function area is some part of the screen that is responsible for something specific. 

      _____________________________________________________________         __
      File uploader                            Search_________                |--Header area component function area.
                                        oAll oUploaded oSynced oNew         __|
        ----------------------------------------------------                  |
      [@]    My December Expenses.txt                        0.9kb            |--List of files component function area.
              uploaded                     reloaded  trash  cloud             |__
        ----------------------------------------------------                  |  |
      [@]    me on skis.jpg                                  4.3kb            |  |--Individual file component function area.
              uploaded                     reloaded  trash  cloud             |__|
        ----------------------------------------------------                  |
      [@]   cats falling.mov                                 3.4mb            |
              uploaded                     reloaded  trash  cloud             |
        ----------------------------------------------------                __|
      _____________________________________________________________


In the mockup above, the design is split up into 3 components:
  1. Header component.
  2. List component.
  3. File component.

The most effective designs are made up of components that each only have a single responsibility. This is good
because it makes it easier to test your components and debug them. It also makes them practical for reusability.







How do you think about decomposing a mockup for react components?
=================================================================

1. Start with the Root component.
  The root component is the central component that all the other components will be nested inside. In the case of this 
  application, the root component is going to the header component and list component nested inside it. From there
  you can take each component and then break that down to even smaller components.


2. Also consider data when breaking down the components.
  Each componnt will either display or have some interaction with a part of that data. In the case of this application, the data is
  going to be an array of objects. You need to think about a few things here.
    A. Which component in the interface relates to the array of objects?
    B. Which component relates to a single object?
    C. Which Do we need components for any part of the object?


3. Try to further decompose the components that you already identified and give them a functional name:
  1. Entire application (i.e. app component)     -- FileUploader
    I. Header component.                         ---  SeachBar
      1. Input bar.                              ----   SearchBox
      2. Filter options.                         ----   FilterOptions
    II. List component.                          ---  FilterableList
    III. File component.                         ---  ListItem
      1. List item control bar.                  ----   ControlBar


4. Think about the heirarchical structure of the arranged components.
  This is going to give you a better idea of what 

                                    FileUploader
                                          |
                      ____________________|___________________   
                      |                                       |
                    SearchBar                             FilterableList
                      |                                       |
            __________|__________                     ________|____________________________________  
            |                    |                    |                     |                      |
        SearchInput         FilerOptions          ListItem               ListItem              ListItem
                                                      |
                                                  ControlBar





How do you build the app from decomposition?
============================================
1. Build out the application's USER INTERFACE with no interaction
  Building the application out without any interaction is like building a live wireframe of your application. 
  However, it depends on what sort of application you are building. 
  
  A. For complex apps, build from the bottom up.
      For example, if you are building an app that is highly complex, you would want to build out smaller
      components first that are lower in the tree and then use those to build the components higher up until you 
      have a fully working app.

  B. For simpler apps, build from the top down.
      When you build smaller apps, it is possible to build from the root component down until all your components
      are built.

 C. Each component should have a render method that displays the data in your model.
      That data should only be props for now since you are not doing the interactivity and state is about interactivity
      and how data changes over time. You can declare the data needed in the root of the application and pass props to 
      the nested components.





Building the file uploader application
=======================================
1. Add static data for the app.
  For this application, we are going to use static data that will be supplied to the app via a constant called "FILES".
  In order for the application to use this data, you need to pass it to the App component as a prop.
  
  ---------------------------------------------------------------------------------------------------------------
    import React from 'react';
    import ReactDOM from 'react-dom';
    import './index.css';
    import App from './App';

    const FILES = [                                                                                                 // 1. "FILES" constant will function as the data for the application.
      {"fileType":"jpg","size":"4.3MB","name":"me on skis.jpg","status":"Synced"},
      {"fileType":"mov","size":"1.3GB","name":"cats falling.mov","status":"Uploaded"},
      {"fileType":"txt","size":"0.9KB","name":"My December expenses.txt","status":"Uploaded"},
      {"fileType":"mp3","size":"3.4MB","name":"disturbed_sound_of_silence.mp3","status":"New"},
    ];

    ReactDOM.render(<App files={FILES}/>, document.getElementById('root'));                                         // 2. pass in the "FILES" constant as a prop (e.g. files={FILES}).
  ---------------------------------------------------------------------------------------------------------------


2. Modify the App component to be composed of TWO components
  In the planning and wireframing phase, we decided that the "SearchBar" and "FilterableList" would be two central 
  components of the application. But first things first, set up your class component.
  ----------------------------------------------------------------------------------------------------------------
    import React, { Component } from 'react';                                                                       // 1. Import react

    class App extends Component  {                                                                                  // 2. Class component named App.
      render() {
        return (

        )
      }
    }

    export default App;                                                                                              // 3. Export component.
  ----------------------------------------------------------------------------------------------------------------
                                        